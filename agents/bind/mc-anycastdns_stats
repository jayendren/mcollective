#!/usr/local/bin/ruby19
# Author: Todor Genov (tgenov@gmail.com)
# Author: Jayendren Maduray (jayendren@gmail.com)

require 'mcollective'
require 'colorize'
include MCollective::RPC

options = rpcoptions do |parser, options|
   parser.define_head "AnycastDNS Top talkers"
   parser.banner = "Usage: mc-anycastdns_stats --num N --time SEC "

   parser.on('-s', '--runtime SEC', 'Number of seconds to sample traffic for. Default 5') do |v|
      options[:time_period] = v.to_i
   end
   parser.on('-n', '--num N', 'Return the Top N talkers from the DNS cluster. Default 5') do |v|
  options[:max_hosts] = v.to_i
   end
end

unless options.include?(:time_period)
  options[:time_period] = 5
end

unless options.include?(:max_hosts)
  options[:max_hosts] = 5
end

mc = rpcclient("bind",:options => options)
result = mc.top(:max_hosts => options[:max_hosts], :time_period => options[:time_period])
mc.disconnect

printf "\nNodes        :".green
printf "\n--".cyan

aggregate = {}
result.each { |resp| #print nodes that exec plugin
  aggregate = aggregate.merge(resp[:data]) { |key,v1,v2| v1+v2 }
  sender = resp[:sender]
  printf "\n%s ".cyan % [ sender ]
}

printf "\n--".cyan
printf "\nTotal qps    :".green
printf "%.02f".white.on_red.blink % [ aggregate[:total_qps] ]
printf "\n"
printf "Runtime      :".green
printf "%s seconds".white.on_red.blink % [ options[:time_period] ]

printf "\n--".cyan
printf "\nTop #{options[:max_hosts]} talkers:".green
printf "\n--\n".cyan
sorted = aggregate[:ip_qps].sort_by {|ip,qps| qps}
sorted.reverse!
sorted[1..options[:max_hosts]].each  { |host,qc|
  printf "Host         :\s".cyan
  printf "%s\n".red  % [ host ]
  printf "Total queries:\s".cyan
  printf "%s\n".red % [ qc ]
  printf "qps          :\s".cyan
  printf "%s\n".red % [ qc/options[:time_period] ]
  printf "percent      :\s".cyan
  printf "%.2f\n".red % [ qc/aggregate[:total_packet_count].to_f * 100 ]
  printf "--\n".cyan
}
